# -*- coding: utf-8 -*-
"""Copia de Untitled44.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UDVMzVK20seV5tfjJr7ATTsYxgQTxwJw
"""

# Importar bibliotecas
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn import datasets
from sklearn import metrics
import pandas as pd

file_path = 'breast-cancer.data'
df = pd.read_csv(file_path)

df.info()

df.head(10)

df['edad'].unique()

from sklearn.preprocessing import LabelEncoder
labelencoder= LabelEncoder()
df['clase'] = labelencoder.fit_transform(df['clase'])
df['edad'] = labelencoder.fit_transform(df['edad'])
df['menopausia'] = labelencoder.fit_transform(df['menopausia'])
df['tumor_tamaño'] = labelencoder.fit_transform(df['tumor_tamaño'])
df['Ganglios_inv'] = labelencoder.fit_transform(df['Ganglios_inv'])
df['nodo_capa'] = labelencoder.fit_transform(df['nodo_capa'])
df['seno'] = labelencoder.fit_transform(df['seno'])
df['lado'] = labelencoder.fit_transform(df['lado'])
df['irradiar'] = labelencoder.fit_transform(df['irradiar'])

df.head(10)

df['edad'].unique()

# Cargar un conjunto de datos de ejemplo, por ejemplo, el conjunto de datos de iris


X = df.iloc[:, :-1]
y = df.iloc[:, -1]

# Dividir el conjunto de datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

# Crear un clasificador k-NN con, por ejemplo, k=3
knn = KNeighborsClassifier(n_neighbors=2)

# Ajustar el modelo con los datos de entrenamiento
knn.fit(X_train, y_train)

# Realizar predicciones en el conjunto de prueba
y_pred = knn.predict(X_test)

# Evaluar la precisión del modelo
accuracy = metrics.accuracy_score(y_test, y_pred)
print(f'Precisión del modelo: {accuracy}')



# Realizar una predicción para un nuevo conjunto de características (nueva instancia)
# Asegúrate de ajustar las características según tu conjunto de datos

new_data = [['no-recurrence-events', '40-49', 'ge40', '20-24','0-2','no',1,'left','left_low']]  # Ajusta los valores de las características según tu conjunto de datos
prediction = knn.predict(new_data)
print(f'Predicción para nuevas características: {prediction}')